// HmAiWriting v1.1.1.4

// このファイルはCCOとなります。
// https://creativecommons.jp/sciencecommons/aboutcc0/


jsmode @"WebView2" + currentmacrofilename;

js {
    const myTargetAiDirectory = "";

    // 対象のターゲットディレクトリにあるAIマクロファイルのパスとエンジン名を取得する。
    function getAiEngineMacroPath(targetAiDirectory = currentmacrodirectory()) {
        const engines = ["HmOpenAiGpt", "HmGoogleGemini"];
        for (const engine of engines) {
            const targetAiMacroPath = `${targetAiDirectory}\\${engine}.mac`;
            if (existfile(targetAiMacroPath)) {
                return [targetAiMacroPath, engine];
            }
        }
        return ["", ""];
    }

    let [targetAiMacroPath, targetAiEngine] = getAiEngineMacroPath(myTargetAiDirectory);
    setVar("$targetAiMacroPath", targetAiMacroPath);
    setVar("$targetAiEngine", targetAiEngine);
}

if ($targetAiEngine == "") {
    message("この「マクロファイル」と同じフォルダに、\n【HmOpenAiGpt.mac】【HmGoogleGemini.mac】\nいずれのAIマクロも見つかりませんでした。");
    endmacro;
}


jsmode @"WebView2\" + $targetAiEngine;
js {

// 最後した「質問と応答」をＡＩ記憶に残すか残さないのか。
// (その場限りの指示を出したつもりでもＡＩはずっと記憶していると、返答によからぬ影響を与えるため）
var _shouldRememberLastResponse = true;

var _tempRequestQuestionText = "";
function onRequestQuestionText() {

    // リセットなら、非同期でリセットコマンドを送信
    // 「レンダリング枠」で「全リセット」のボタンを押したかのような動きにしておく
    if (_tempRequestQuestionText == "reset") {
        hidemaru.setTimeout( ()=>{onHtmlEventHandler("reset"); }, 100 );

        return false; // HmOpenAiGptやHmGoogleGeminiの元来のメニューは出さない
    }
    else if (_tempRequestQuestionText == "paste") {
        hidemaru.setTimeout( ()=>{onHtmlEventHandler("paste"); }, 100 );

        return false; // HmOpenAiGptやHmGoogleGeminiの元来のメニューは出さない
    }

    // それ以外なら、構築した質問内容のテキストを返す。
    return _tempRequestQuestionText;
}

function onCompleteAnswerText(answer_text) {

    // クリップボードに追加しておく(境界をわかりやすくするため、改行を加えておく)
    setclipboard(answer_text + "\n");

    insert("\n");

    // その指示と返答を、AI履歴として記憶するべきではないなら、AIの記憶から消す
    if (!_shouldRememberLastResponse) {
        hidemaru.setTimeout(() => { onHtmlEventHandler("pop"); }, 300);
    }
}

function myEntryPoint() {

    _tempRequestQuestionText = "";

    let targetAiEngine = getVar("$targetAiEngine");
    let targetAiMacroPath = getVar("$targetAiMacroPath");
    let currentMacroDir = currentmacrodirectory();

    let selectedText = hidemaru.getSelectedText();

    let menuhash = [];
    // テキストの選択がある時のメニュー
    if (selectedText) {
        menuhash = [
            {
                text: "タイトル考案(&T) ⇐ 選択中の複数の単語",
                cmnd: "以下のキーワードを基に日本語でタイトルを９個提案してください\n\n###\n\n" + selectedText,
                hist: true,
            },
            {
                text: "アウトライン案(&O) ⇐ 選択中の単語群もしくはタイトル",
                cmnd: "以下のキーワードを基に記事構成案を考えてください\n\n###\n\n" + selectedText,
                hist: true,
            },
            {
                text: "\x01",
                cmnd: "",
                hist: false,
            },
            {
                text: "文面ラフ案(&S) ⇐ 選択中のアウトラインの一部",
                cmnd: "以下の構成内容に関して、それぞれに具体的内容の文章を考えてください\n\n###\n\n" + selectedText,
                hist: true,
            },
            {
                text: "\x01",
                cmnd: "",
                hist: false,
            },
            {
                text: "簡潔文章案(&E) ⇐ 選択中の文章",
                cmnd: "次の文章の全てを簡潔な文章に直して下さい。\n\n###\n\n" + selectedText,
                hist: false,
            },
            {
                text: "超要約案(&Y) ⇐ 選択中の文章",
                cmnd: "次の文章全体を出来るだけ短い文章で要約してください。\n\n###\n\n" + selectedText,
                hist: false,
            },
            {
                text: "ツイート長(&X) ⇐ 選択中の文章",
                cmnd: "次の文章をツイッターのツイートに収まる100文字以上140文字未満の文章に要約してください。ツイッターに適した文面にしてください。\n\n###\n\n" + selectedText,
                hist: false,
            },
            {
                text: "詳細文章案(&D) ⇐ 選択中の文章",
                cmnd: "次の文章の全てを深い内容の詳細な文章に直して下さい。\n\n###\n\n" + selectedText,
                hist: false,
            },
            {
                text: "変更文章案(&C) ⇐ 選択中の文章",
                cmnd: "次の文章を文章構成を大きく変更して書き換えてください。３つ提示してください。提示した文章と同じぐらいの長さにしてください。\n\n###\n\n" + selectedText,
                hist: false,
            },
            {
                text: "\x01",
                cmnd: "",
                hist: false,
            },
            {
                text: "根拠やデータ(&K) ⇐ 選択中の文章",
                cmnd: "次の文章の根拠やデータを提示してください、必要に応じて「表」や「アスキーアートを使ったグラフ」を使って下さい。ただし条件として、\n" +
                    "- 架空の言葉である場合を考慮してください。\n" +
                    "- 回答に自身がない場合は答えないでください。\n" +
                    "- 不正確な可能性が高い場合は答えないでください。\n" +
                    "- 理解できなければ答えないでください。\n" +
                    "\n\n###\n\n" + selectedText,
                hist: false,
            },
            {
                text: "\x01",
                cmnd: "",
                hist: false,
            },
            {
                text: "言葉の意味(&I) ⇐ 選択中の単語",
                cmnd: "以下の言葉の意味を説明してください。ただし条件として、\n" +
                    "- 架空の言葉である場合を考慮してください。\n" +
                    "- 回答に自身がない場合は答えないでください。\n" +
                    "- 不正確な可能性が高い場合は答えないでください。\n" +
                    "- 理解できなければ答えないでください。\n" +
                    "\n\n###\n\n" + selectedText,
                hist: false,
            },
            {
                text: "類似表現(&B) ⇐ 選択中の単語",
                cmnd: "次に示す単語の類似表現を９個提案してください。\n\n###\n\n" + selectedText,
                hist: false,
            },
            {
                text: "誤字脱字(&G) ⇐ 選択中の文章",
                cmnd: "次の文章の対して誤字脱字や、タイプミス、不適切な表現をチェックしてください。不適切な箇所だけを提示してください。\n\n###\n\n" + selectedText,
                hist: false,
            },
            {
                text: "\x01",
                cmnd: "",
                hist: false,
            },
            {
                text: "Youtube用脚本案(&U) ⇐ 選択中の単語群もしくはタイトル",
                cmnd: "Youtube用に「" + selectedText + "」についての動画を作成するから脚本を書いてください。",
                hist: true,
            },
            {
                text: "詳細台本案(&L) ⇐ 選択中の脚本の一部分",
                cmnd: "以下の部分の詳細な台本を書いて下さい。\n\n###\n\n" + selectedText,
                hist: true,
            },
            {
                text: "\x01",
                cmnd: "",
                hist: false,
            },
            {
                text: "選択テキストの内容を質問する(&Q)",
                cmnd: selectedText,
                hist: false,
            },
            {
                text: "\x01",
                cmnd: "",
                hist: false,
            },
            {
                text: "全リセット(&R)",
                cmnd: "reset",
                hist: false,
            },
            {
                text: "応答を張り付け (&V)",
                cmnd: "paste",
                hist: false,
            },
        ];
    }
    // テキストの選択が無い時のメニュー
    else {
        menuhash = [
            {
                text: "全リセット(&R)",
                cmnd: "reset",
                hist: false,
            },
            {
                text: "応答を張り付け (&V)",
                cmnd: "paste",
                hist: false,
            },
        ];
    }

    let menuTextList = menuhash.map(item=>item.text);
    let menuCommandList = menuhash.map(item=>item.cmnd);
    let menuHistoryList = menuhash.map(item=>item.hist);

    let selectedMenuID = menuarray(menuTextList);


    // 0はメニューキャンセル
    if (selectedMenuID === 0) {

        // HmGoogleGeminiのレンダリング枠を閉じておく
        renderpanecommand({target:targetAiEngine, show:0});

        // キャンセルの意思なので、AI応答のマクロファイル自体を呼び出さない
        return;
    }

    // なんだかのメニュー内容を選んでいるのであれば...
    else {
        let selectedMenuIX = selectedMenuID - 1; // menu は選択した番号が1から始まるから0からになおす

        // メニューで選んだ内容を後で使えるようにvar大域の変数に代入する。
        _tempRequestQuestionText = menuCommandList[selectedMenuIX]

        // この応答はＡＩ記憶のヒストリーに残すのか残さないのか。後で使うのでvar大域の変数に代入する。
        _shouldRememberLastResponse = menuHistoryList[selectedMenuIX]

        let argobj = { onRequestQuestionText: 1, onCompleteAnswerText: 1 };

        // 確実にpostExecMacroFileを行う書き方
        let peRetry = hidemaru.setInterval(()=>{
            if (hidemaru.isMacroExecuting()) return; // 再挑戦
            let isScheduled = hidemaru.postExecMacroFile(`"${targetAiMacroPath}"`, argobj ) ?? 1;
            if (isScheduled) { hidemaru.clearInterval(peRetry); }
        }, 100);
    }
}

myEntryPoint();


} // js

